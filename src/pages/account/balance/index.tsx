import { type NextPage } from "next";
import { DashboardWrapper } from "~/components/DashboardWrapper/DashboardWrapper";
import { api } from "~/utils/api";
import { UiBox } from "~/components/uiBox/uiBox";
import styles from "./index.module.scss";
import { useEffect, useState } from "react";
import { useUser } from "@clerk/nextjs";
import Head from "next/head";
import Link from "next/link";
import parcoinImport from "../../../../public/icon/parkcoin-filled.svg";
import calendarImport from "../../../../public/icon/calendar.svg";
import Image from "next/image";
import { DashboardFooter } from "~/components/DashboardElements/components/DashboardFooter/DashboardFooter";
import { type Booking } from "@prisma/client";
import { type CoinOrder } from "@prisma/client";
import { BalanceItemBooking } from "~/components/BalanceItem/BalanceItemBooking";
import { BalanceItemOrder } from "~/components/BalanceItem/BalanceItemOrder";

const Balance: NextPage = () => {
  const user = useUser();
  const [userId, setUserId] = useState<string>("");
  const [balanceList, setBalanceList] = useState<(Booking | CoinOrder)[]>([]);

  const parcoinIcon = parcoinImport as unknown as string;
  const calendarIcon = calendarImport as unknown as string;

  const {
    data: userData,
    refetch: userRefetch,
    isLoading: userIsLoading,
  } = api.profile.getProfileById.useQuery({
    id: userId,
  });

  useEffect(() => {
    if (user.isLoaded && user.user?.id && !userId) {
      setUserId(user.user.id);
      void userRefetch();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user.isLoaded, user?.user?.id]);

  useEffect(() => {
    if (userData?.Booking && userData.CoinOrder && !userIsLoading) {
      const bookingsArray = userData.Booking;
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const orderArray = userData.CoinOrder;
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment

      const sorted = [...bookingsArray, ...orderArray];

      setBalanceList(
        sorted.sort((a, b) => {
          return (
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
          );
        })
      );
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [userData]);

  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any
  const isBooking = (item: any): item is Booking => {
    return (item as Booking).price !== undefined;
  };

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const isCoinOrder = (item: any): item is CoinOrder => {
    return (item as CoinOrder).amount !== undefined;
  };

  return (
    <>
      <Head>
        <title>Balance | Parky</title>
        <meta name="Balance page" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <DashboardWrapper active="balance">
        <main className={styles.wrapper}>
          <h2>Balance overview</h2>
          <UiBox className={styles.small}>
            <h4>Account balance</h4>
            <h2>
              {userData?.balance}{" "}
              <Image
                src={parcoinIcon}
                alt="parcoin icon"
                height={32}
                width={32}
              />
            </h2>
          </UiBox>
          <UiBox className={styles.large}>
            <h4>Recent changes</h4>
            <div className={styles.balanceList}>
              <p>Type</p>
              <p>Date</p>
              <p>Amount</p>
            </div>
            <ul>
              {balanceList.map((item, index) =>
                isBooking(item) ? (
                  <BalanceItemBooking key={index} {...item} />
                ) : isCoinOrder(item) ? (
                  <BalanceItemOrder key={index} {...item} />
                ) : (
                  <div>Something went wrong</div>
                )
              )}
              {balanceList.length === 0 && (
                <li className={styles.noData}>
                  <p>No data found.</p>
                </li>
              )}
            </ul>
          </UiBox>
          <UiBox className={styles.small}>
            <h4>Bookings</h4>
            <h2>
              {userData?.Booking.length}{" "}
              <Image
                src={calendarIcon}
                alt="calendar icon"
                height={32}
                width={32}
              />
            </h2>
            <span>
              <Link href="/account/bookings">See details</Link>
            </span>
          </UiBox>
          <UiBox className={styles.small}>
            <h4>Quick access</h4>
            <ul>
              <li>
                <Link href="/">Home</Link>
              </li>
              <li>
                <Link href="/map">Book parking</Link>
              </li>
              <li>
                <Link href="/account/top-up">Top up account</Link>
              </li>
              <li>
                <Link href="/get-benefits">Get benefits</Link>
              </li>
            </ul>
          </UiBox>
          <DashboardFooter>
            <ul>
              <li>
                <Link href="/contact">Contact</Link>
              </li>
              <li>
                <Link href="/help">Help</Link>
              </li>
            </ul>
          </DashboardFooter>
        </main>
      </DashboardWrapper>
    </>
  );
};

export default Balance;

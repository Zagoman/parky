import { SignInButton, useUser } from "@clerk/nextjs"
import type { GetStaticPaths, GetStaticProps, NextPage } from "next"
import Head from "next/head"
import CreateProfile from "~/components/CreateProfile/CreateProfile"
import { RouterOutputs, api } from "~/utils/api"
import Link from "next/link"
import { createServerSideHelpers } from "@trpc/react-query/server"
import { appRouter } from "~/server/api/root"
import { prisma } from "~/server/db"
import SuperJSON from "superjson"
import { TRPCError } from "@trpc/server"

type UpdateProfilePageProps = {
  username: string
  profile: RouterOutputs["profile"]["getProfileByUsername"]
}
const UpdateProfilePage: NextPage<UpdateProfilePageProps> = ({
  username,
  profile,
}) => {
  const { user, isSignedIn, isLoaded } = useUser()
  if (!isLoaded) {
    return <div>Loading...</div>
  }
  if (isSignedIn && profile && user.id === profile.id) {
    return (
      <>
        <Head>
          <title>Update profile | Parky</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main>
          <CreateProfile update profile={profile} />
        </main>
      </>
    )
  }

  if (isSignedIn && !profile) {
    return (
      <div>
        <h1>You must create a profile before you are able to update it</h1>
        <Link href={"/profile/create"}>Create profile</Link>
      </div>
    )
  }
  return (
    <div>
      <h1>You need to sign in first</h1>
      <SignInButton redirectUrl={`/profile/update/${username}`} />
      <Link href={"/"}>Go back home</Link>
    </div>
  )
}

export const getStaticProps: GetStaticProps = async (context) => {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: SuperJSON, // optional - adds superjson serialization
  })
  const username = context.params?.username
  if (username && typeof username === "string") {
    const profile = await helpers.profile.getProfileByUsername.fetch({
      username,
    })
    return {
      props: {
        trpcState: helpers.dehydrate(),
        username,
        profile,
      },
    }
  }

  throw new TRPCError({
    code: "NOT_FOUND",
    message: "User  not found",
  })
}

export const getStaticPaths: GetStaticPaths = () => {
  return { paths: [], fallback: "blocking" }
}

export default UpdateProfilePage
